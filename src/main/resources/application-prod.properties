server.port=8100
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://10.41.0.247:3306/monitoring
spring.datasource.username=root
spring.datasource.password=654321
spring.mvc.format.date=yyyy-MM-dd
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

org.opfr.dictionary.fallback-url=http://sa04100uitwa243.0041.pfr.ru:8012
org.opfr.dictionary.clients.employee=true

spring.application.name=cart
eureka.client.enabled=false
spring.cloud.compatibility-verifier.enabled=false

    # указываем что сериализовать ключ надо в String. Иначе их читать потом глазками не очень удобно
    spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
    # а содержимое сериализуем в JSON. Универсальный формат обмена
    spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
    # следующие параметры служат для чтения сообщений из очереди. Вначале десериализуем ключ в текст
    spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
    # а потом сообщаем что тело сообщение - JSON и его надо преобразовать в требуемый класс
    spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
    # в целях безопасности Kafka верит только в классы из пакета java.util и из пакетов из параметра ниже. 
    # здесь мы указываем те пакеты, к которым принадлежат классы, которые мы используем в обмене
    spring.kafka.consumer.properties.spring.json.trusted.packages=org.opfr.doccreatormodels
    # перечисляем список серверов. В случае отказа одного из них, приложение само попытается достучаться до остальных
    spring.kafka.bootstrap-servers=sa04100uitwa250.0041.pfr.ru:9092,sa04100uitwa249.0041.pfr.ru:9092,sa04100uitwa248.0041.pfr.ru:9092,sa04100uitwa243.0041.pfr.ru:9092
    # указываем максимальный размер пакета. Если идет обмен крупными данными, то лучше его ставить немного выше чем нужно
    spring.kafka.properties.max.request.size=60000000
    # включаем автоподтверждение о получении сообщения. Если нет обработки ошибок, то лучше этот параметр поставить в false
    spring.kafka.consumer.enable-auto-commit=true

